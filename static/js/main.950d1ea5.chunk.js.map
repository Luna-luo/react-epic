{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/auth.js","stores/index.js","components/logo.svg"],"names":["Header","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Components","observer","history","useHistory","useStores","UserStore","AuthStore","src","LogoUrl","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","push","console","log","Footer","footer","Loading","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","AV","init","appId","appKey","serverURL","Auth","register","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","login","logIn","logOut","getCurrentUser","current","this","observable","action","values","pullUser","err","resetUser","Context","createContext","stores","useContext","module","exports"],"mappings":"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","file":"static/js/main.950d1ea5.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport {NavLink, useHistory} from 'react-router-dom';\nimport LogoUrl from './logo.svg';\nimport styled from 'styled-components';\nimport {Button} from 'antd';\nimport {useStores} from \"../stores\";\nimport { observer } from \"mobx-react\";\n\n\nconst Header = styled.header`\n  display:flex;\n  align-items:center;\n  padding:10px 100px;\n  background-color: #02101f;\n  color: #fff;\n`\n\nconst Logo = styled.img`\n  height:30px;\n`\n\nconst StyledLink = styled(NavLink)`\n  color:#fff;\n  margin:30px;\n  \n  &.active{\n  border-bottom:1px solid #fff;\n  }\n`\n\nconst Login = styled.div`\n  margin-left:auto;\n`\n\nconst StyledButton = styled(Button)`\n  margin-left:10px;\n`\n\nconst Components = observer(()=>{\n\n  const history = useHistory();\n  const {UserStore, AuthStore} = useStores();\n\n  const handleLogout= ()=>{\n    AuthStore.logout();\n  }\n\n  const handleLogin= ()=>{\n    history.push('/login');\n  }\n\n  const handleRegister= ()=>{\n    console.log('跳转到注册页面')\n    history.push('/register');\n  }\n\n  return (\n    <Header>\n      <Logo src={LogoUrl}/>\n      <nav>\n        <StyledLink to=\"/\" activeClassName='active'exact>首页</StyledLink>\n        <StyledLink to=\"/history\" activeClassName='active'>上传历史</StyledLink>\n        <StyledLink to=\"/about\" activeClassName='active'>关于我</StyledLink>\n      </nav>\n      <Login>\n        {\n          UserStore.currentUser? <>\n            {UserStore.currentUser.attributes.username} <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\n          </>:<>\n            <StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\n            <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\n          </>\n        }\n      </Login>\n    </Header>\n  )\n})\n\nexport default Components;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Footer=styled.footer`\n  padding:10px 100px;\n  text-align: center;\n  color:#aaa;\n  font-size:12px;\n`\n\nfunction Components(){\n  return (\n    <Footer>\n      <p>Footer</p>\n    </Footer>\n  )\n}\n\nexport default Components;","import React from \"react\";\n\nfunction Loading(){\n  return (\n    <div>\n      Loading...\n    </div>\n  )\n}\n\nexport default Loading;","import React,{Suspense,lazy} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from \"./components/Footer\";\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Loading from './components/Loading';\n// import Home from \"./pages/Home\";\n// import History from \"./pages/History\";\n// import About from \"./pages/History\";\n\nconst Home = lazy(() => import('./pages/Home'));\nconst History = lazy(() => import('./pages/History'));\nconst About = lazy(() => import('./pages/About'));\nconst Login = lazy(() => import('./pages/Login'));\nconst Register = lazy(() => import('./pages/Register'));\n\n\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <main>\n        <Suspense fallback={<Loading/>}>\n          <Switch>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/history\" component={History}/>\n            <Route path=\"/about\" exact component={About}/>\n            <Route path=\"/login\" exact component={Login}/>\n            <Route path=\"/register\" exact component={Register}/>\n          </Switch>\n        </Suspense>\n      </main>\n\n      <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Model from './models';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom';\n\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AV,{Query,User} from \"leancloud-storage\"\n\nAV.init({\n  appId: \"RV5uwMKHOQ7AWwCacuOe97Ud-gzGzoHsz\",\n  appKey: \"7Fwpoey5kUh041lud2kYBVD4\",\n  serverURL: \"https://rv5uwmkh.lc-cn-n1-shared.com\"\n});\n\nconst Auth = {\n  register(username,password) {\n    let user = new User();\n    user.setUsername(username);\n    user.setPassword(password);\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\n    });\n  },\n\n  login(username,password){\n    return new Promise((resolve,reject)=>{\n      User.logIn(username,password).then(loginedUser=>resolve(loginedUser), error => reject(error));\n    })\n  },\n\n  logout(){\n    User.logOut();\n  },\n\n  getCurrentUser(){\n    return User.current()\n  }\n}\n\n\n\nexport {\n  Auth\n};","import {observable, action} from 'mobx';\nimport {Auth} from '../models';\n\n\nclass UserStore {\n  @observable currentUser = null;\n\n  @action pullUser(){\n    this.currentUser = Auth.getCurrentUser();\n  }\n\n  @action resetUser(){\n    this.currentUser = null;\n  }\n}\n\nexport default new UserStore()","import {observable, action} from 'mobx';\nimport {Auth} from '../models';\nimport UserStore from './user';\n\nclass AuthStore {\n  @observable values = {\n    username:'',\n    password:''\n  }\n\n  @action setUsername(username){\n    this.values.username = username;\n  }\n\n  @action setPassword(password){\n    this.values.password = password;\n  }\n\n  @action login(){\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username,this.values.password)\n        .then(user=>{\n          UserStore.pullUser();\n          resolve(user);\n        })\n        .catch(err=>{\n          UserStore.resetUser();\n          reject(err);\n        })\n    })\n  }\n\n  @action register(){\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username,this.values.password)\n        .then(user=>{\n          UserStore.pullUser()\n          resolve(user);\n        })\n        .catch(err=>{\n          UserStore.resetUser();\n          reject(err);\n        })\n    })\n  }\n\n  @action logout(){\n    Auth.logout();\n    UserStore.resetUser();\n  }\n}\n\nexport default new AuthStore()","import React, {createContext, useContext} from \"react\";\nimport AuthStore from './auth';\nimport UserStore from './user'\n\n\nconst Context = createContext({\n  AuthStore,\n  UserStore\n})\n\nwindow.stores = {\n  AuthStore,\n  UserStore\n}\n\nexport const useStores = ()=>useContext(Context);","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}